#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import argparse
import logging
from multiprocessing import cpu_count
from yapp import mendel, family_phaser, recombination

log_config={'debug': logging.DEBUG, 'info': logging.INFO, 'warning':logging.WARNING}

def yapp_parser():
    parser = argparse.ArgumentParser(prog='yapp')
    parser.add_argument('--log-level',choices=['debug','info','warning'],default='info')
    parser.add_argument('-c', type=int, help='Number of CPU to use',default=cpu_count())
    subparsers = parser.add_subparsers(dest='command',
                                       title="Analyses",
                                       description='Available commands')

    # Mendel
    parser_mendel = subparsers.add_parser('mendel', help='Correct genealogies from Mendelian errors')
    parser_mendel.add_argument('prfx', type=str, help='prefix for input / output files')
    parser_mendel.set_defaults(func=mendel.main)

    # Phase
    parser_phase = subparsers.add_parser('phase', help='Phase genotypes based on segregation in a pedigree')
    parser_phase.add_argument('prfx', type=str, help='prefix for input / output files')
    parser_phase.set_defaults(func=family_phaser.main)

    # Recomb
    parser_recomb = subparsers.add_parser('recomb', help='Infer recombinations from phased data')
    parser_recomb.add_argument('prfx', type=str, help='prefix for input / output files')
    parser_recomb.set_defaults(func=recombination.main)

    return parser


def main(args):
    parser=yapp_parser()
    if len(args)<2:
        parser.print_help()
        sys.exit(1)
    myopts = parser.parse_args(args[1:])
    ## Set up logging
    logger = logging.getLogger('yapp')
    logger.setLevel(log_config[myopts.log_level])
    ## Console logs
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    ## Log to file
    fh = logging.FileHandler(myopts.prfx+'_yapp.log')
    fh.setLevel(log_config[myopts.log_level])
    ## Formatter
    formatter = logging.Formatter(f'%(asctime)s [{myopts.command}] %(levelname)s: %(message)s',datefmt='%m/%d/%Y %I:%M:%S %p')
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)
    logger.addHandler(fh)
    logger.addHandler(ch)

    logger.info(f"Starting YAPP {myopts.command} analysis")
    myopts.func(myopts)
    logger.info(f"Finished YAPP {myopts.command} analysis")
    
if __name__=='__main__':
    main(sys.argv)

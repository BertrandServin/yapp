#!/usr/bin/env python3
import os
import sys
import argparse
import pickle
from fastphase import fastphase
from yapp import vcf

def get_parser():
    parser = argparse.ArgumentParser(description='Train a fastphase model')
    parser.add_argument('K', metavar='K', help='number of haplotype clusters',type=int)
    parser.add_argument('--vcf',metavar='FILE',help='read data from vcf')
    parser.add_argument('-o',metavar='PREFIX',help='Use PREFIX for output files',default='fph', dest='prefix')
    parser.add_argument('--vcf-mode',metavar='M',help='data type, one of : '+','.join(vcf.modes_avail),default=vcf.default_mode,
                        choices=vcf.modes_avail,dest='vmode')
    parser.add_argument('-r','--reg', metavar='region', help='region in which the model is trained',
                        default=None,dest='region')
    parser.add_argument('--samples', metavar='IDs', help='comma separated list of samples to use',
                        default=None)
    parser.add_argument('--keep', metavar='FILE', help='Keep samples with IDs listed in FILE',
                        dest="smpfile", default=None)
    parser.add_argument('-e','--nem',metavar='N', type=int, dest='nem',default=20,
                        help='Number of EM runs')
    return parser

def main():
    parser = get_parser()
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit()
    args=parser.parse_args()
    logfile=args.prefix+'.fphtrain.log'
    model_file = args.prefix+'.fphmodel'
    ## get data in
    if args.samples:
        smp = args.samples.split(',')
    else:
        smp = None
    if args.smpfile:
        if not smp:
            smp = open(args.smpfile).read().split()
        else:
            smp += open(args.smpfile).read().split()
    smp = list(set(smp))
    if args.vcf:
        fphdat = vcf.vcf2fph(args.vcf,mode=args.vmode,reg=args.region,samples=smp)
        print(fphdat.keys())

    ## fit fphmodels
    fphmodels = {}
    for r in fphdat['regions']:
        fphmodels[r] = {}
        fphmodels[r]['variants']=fphdat['variants'][r]
        fphmodels[r]['parameters']=[]
        nloc = len(fphdat['variants'][r])
        with fastphase.fastphase(nloc, nproc=os.cpu_count(),prfx=logfile) as fph:
            if args.vmode=='inbred' or args.vmode=='phased':
                for ID,hap in fphdat['data'][r].items():
                    fph.addHaplotype(ID,hap)
                pars = fph.optimfit(args.K,verbose=True)
                fphmodels[r]['parameters'].append(pars)
            elif args.vmode=='genotype':
                for ID,gen in fphdat['data'][r].items():
                    fph.addGenotype(ID,gen)
                for iem in range(args.nem):
                    print("Fitting EM",iem)
                    pars = fph.fit(args.K)
                    fphmodels[r]['parameters'].append(pars)
            elif args.vmode=='likelihood':
                for ID,genlik in fphdat['data'][r].items():
                    fph.addGenotypeLikelihoods(ID,genlik)
                for iem in range(args.nem):
                    print("Fitting EM",iem)
                    pars = fph.fit(args.K)
                    fphmodels[r]['parameters'].append(pars)
            else:
                raise ValueError("Unknown mode"+args.vmode)
    with open(model_file,'wb') as fout:
        pickle.dump(fphmodels, fout)

if __name__=='__main__':
    main()
